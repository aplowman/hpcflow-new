name: deploy

on:
  workflow_run:
    workflows: [test]
    types: [completed]
    branches: [main, develop]

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_tag_name: ${{ steps.get_new_tag.outputs.new_tag_name }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # get all history and tags
          ref: refs/heads/${{ github.event.workflow_run.head_branch }} # use same branch as the triggering event?
          token: ${{ secrets.HPCFLOW_ACTIONS_TOKEN }} # PAT of user who has permission to bypass branch protection

      - run: |
          git config user.name hpcflow-actions
          git config user.email hpcflow-actions@users.noreply.github.com

      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Get git-chglog executable
        run: |
          wget https://github.com/git-chglog/git-chglog/releases/download/v0.15.0/git-chglog_0.15.0_linux_amd64.tar.gz
          tar --extract --file git-chglog_0.15.0_linux_amd64.tar.gz git-chglog

      - name: Install commitizen
        run: pip install commitizen

      - name: Manipulate tags (stable release) # TODO: maybe first change develop branch to match new main version?
        if: github.event.workflow_run.head_branch == 'main'
        run:
          | # delete all pre-release tags, set current version to the latest stable release,
          CUR_PRE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_PRE_TAG is: $CUR_PRE_TAG"
          echo "cur_pre_tag=$CUR_PRE_TAG" >> $GITHUB_ENV          
          git tag -l
          git tag -l | awk '/^(v[0-9]+\.[0-9]+\.[0-9]+(a|b|rc).*)$/ {print $1}' | xargs git tag -d
          git tag -l

      - name: Get current tag
        run: |
          CUR_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CUR_TAG is: $CUR_TAG"
          echo "cur_tag=$CUR_TAG" >> $GITHUB_ENV

      - name: Commitizen bump (pre-release) # Bump version strings (pre-release) and add a new tag; commit
        if: github.event.workflow_run.head_branch == 'develop'
        run: cz bump --prerelease alpha

      - name: Commitizen bump # First update version number to latest stable release, then bump to new stable release, add a new tag and commit
        if: github.event.workflow_run.head_branch == 'main'
        run: |
          python update_main_version.py ${{ env.cur_pre_tag }} ${{ env.cur_tag }}
          cz bump

      - name: Get new tag
        id: get_new_tag
        run: |
          NEW_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "NEW_TAG is: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV
          echo "::set-output name=new_tag_name::$NEW_TAG"

      - name: Generate CHANGELOG (stable release)
        if: github.event.workflow_run.head_branch == 'main'
        run: |
          ./git-chglog --output CHANGELOG.md
          git add CHANGELOG.md

      - name: Generate CHANGELOG (pre-release)
        if: github.event.workflow_run.head_branch == 'develop'
        run: |
          ./git-chglog --output CHANGELOG-dev.md
          git add CHANGELOG-dev.md

      - name: Push new CHANGELOG
        run: |
          git tag -d ${{ env.new_tag }}
          git commit --amend --no-edit
          git tag ${{ env.new_tag }}
          git push && git push origin ${{ env.new_tag }}

      - name: Merge to develop (stable release)
        if: github.event.workflow_run.head_branch == 'main'
        run: |
          export SKIP=end-of-file-fixer
          git checkout develop
          git pull
          git merge main
          git checkout --theirs .\pyproject.toml .\hpcflow\_version.py
          git commit -am "merge main into develop [skip ci]"
          git push

      - name: Generate incremental CHANGELOG for GitHub release body
        run: |
          ./git-chglog --template .chglog/RELEASE.tpl.md --output CHANGELOG_increment.md ${{ env.new_tag }}
          cat CHANGELOG_increment.md

      - uses: actions/upload-artifact@v2
        with:
          name: CHANGELOG_increment
          path: CHANGELOG_increment.md

  build-executables:
    needs: bump-version
    strategy:
      fail-fast: false
      matrix:
        #os: [windows-2019, ubuntu-18.04, macos-10.15]
        os: [ubuntu-18.04]
        include:
          # - os: windows-2019
          #   executable_ext: .exe
          #   executable_os: win
          - os: ubuntu-18.04
            executable_ext: ""
            executable_os: linux
          # - os: macos-10.15
          #   executable_ext: ""
          #   executable_os: macos

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: refs/heads/${{ github.event.workflow_run.head_branch }} # otherwise we get the ref when the workflow started (missing above commit)

      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install poetry
        run: python -m pip install poetry==1.1.11

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: venv-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install

      - name: Build with pyinstaller for ${{matrix.executable_os}}
        run: poetry run pyinstaller hpcflow/cli.py --name=hpcflow-${{ needs.bump-version.outputs.new_tag_name }} --onefile

      - name: Rename executable for ${{matrix.executable_os}}
        run: mv dist/hpcflow-${{ needs.bump-version.outputs.new_tag_name }}${{ matrix.executable_ext }} dist/hpcflow-${{ needs.bump-version.outputs.new_tag_name }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}

      - uses: actions/upload-artifact@v2
        with:
          name: hpcflow-${{ needs.bump-version.outputs.new_tag_name }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}
          path: dist/hpcflow-${{ needs.bump-version.outputs.new_tag_name }}-${{ matrix.executable_os }}${{ matrix.executable_ext }}

      - name: Basic executable test
        run: dist/hpcflow-${{ needs.bump-version.outputs.new_tag_name }}-${{ matrix.executable_os }}${{ matrix.executable_ext }} --version

  release-github-PyPI:
    needs: [bump-version, build-executables]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: refs/heads/${{ github.event.workflow_run.head_branch }} # otherwise we get the ref when the workflow started (missing above commit)

      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install poetry
        run: python -m pip install poetry==1.1.11

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: venv-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install

      - name: Build (for PyPI)
        run: |
          poetry build

      - run: mkdir release-artifacts

      - uses: actions/download-artifact@v2
        id: download_executables
        with:
          path: release-artifacts

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-artifacts/CHANGELOG_increment/CHANGELOG_increment.md
          tag_name: ${{ needs.bump-version.outputs.new_tag_name }}
          files: release-artifacts/hpcflow-*/*
          prerelease: ${{ github.event.workflow_run.head_branch == 'develop' }}

      - name: Publish (to test PyPI)
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI }}
          poetry publish --repository test-pypi
